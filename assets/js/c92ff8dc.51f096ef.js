"use strict";(globalThis.webpackChunkz2k_plugin_templates_docs=globalThis.webpackChunkz2k_plugin_templates_docs||[]).push([[4974],{6367:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"reference-manual/field-info-helper/field-info-syntax","title":"field-info Syntax","description":"The field-info Helper function has a number of parameters (aka options) that allow a user to control the prompting interface. These parameters can either be identified by their position within the {}, by naming each parameter, or by a combination of both approaches.","source":"@site/docs/reference-manual/field-info-helper/field-info-syntax.md","sourceDirName":"reference-manual/field-info-helper","slug":"/reference-manual/field-info-helper/field-info-syntax","permalink":"/z2k-plugin-templates-docs/docs/reference-manual/field-info-helper/field-info-syntax","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":20,"frontMatter":{"sidebar_position":20,"doc_state":"initial_ai_draft","title":"field-info Syntax","sidebar_label":"field-info Syntax","slug":"field-info-syntax"},"sidebar":"Reference Manual","previous":{"title":"field-info Cheat Sheet","permalink":"/z2k-plugin-templates-docs/docs/reference-manual/field-info-helper/field-info-cheat-sheet"},"next":{"title":"field-info Output","permalink":"/z2k-plugin-templates-docs/docs/reference-manual/field-info-helper/field-info-output"}}');var a=r(4848),t=r(8453);const s={sidebar_position:20,doc_state:"initial_ai_draft",title:"field-info Syntax",sidebar_label:"field-info Syntax",slug:"field-info-syntax"},l="field-info Syntax",o={},d=[{value:"Overall structure",id:"overall-structure",level:2},{value:"Specifying Parameters",id:"specifying-parameters",level:2},{value:"Positional Parameters",id:"positional-parameters",level:3},{value:"Named Parameters",id:"named-parameters",level:3},{value:"Hybrid Parameters",id:"hybrid-parameters",level:3},{value:"Devilish Details",id:"devilish-details",level:2}];function c(e){const i={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.header,{children:(0,a.jsx)(i.h1,{id:"field-info-syntax",children:"field-info Syntax"})}),"\n",(0,a.jsxs)(i.p,{children:["The ",(0,a.jsx)(i.a,{href:"/docs/reference-manual/field-info-helper/field-info-helper",children:"field-info Helper"})," function has a number of parameters (aka options) that allow a user to control the prompting interface. These parameters can either be identified by their position within the ",(0,a.jsx)(i.code,{children:"{{field-info}}"}),", by ",(0,a.jsx)(i.em,{children:"naming"})," each parameter, or by a combination of both approaches."]}),"\n",(0,a.jsx)(i.h2,{id:"overall-structure",children:"Overall structure"}),"\n",(0,a.jsx)(i.p,{children:"The overall helper structure is as follows:"}),"\n",(0,a.jsx)(i.blockquote,{children:(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.code,{children:"{{field-info"})," ",(0,a.jsx)(i.em,{children:(0,a.jsx)(i.strong,{children:"fieldName"})})," ",(0,a.jsx)(i.em,{children:(0,a.jsx)(i.strong,{children:(0,a.jsx)(i.a,{href:"/optional-parameters",children:"optional-parameters"})})}),(0,a.jsx)(i.code,{children:"}}"})]})}),"\n",(0,a.jsx)(i.p,{children:"where:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"field-info"})," ==  the keyword for this helper function (required)"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.em,{children:(0,a.jsx)(i.strong,{children:"fieldName"})})," == the field name that you are specifying prompting information for (required)"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.em,{children:(0,a.jsx)(i.strong,{children:"optional-parameters"})})," == the ",(0,a.jsx)(i.a,{href:"/docs/reference-manual/field-info-helper/field-info-parameters/field-info-parameters",children:"field-info Parameters"})," (see below)"]}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"specifying-parameters",children:"Specifying Parameters"}),"\n",(0,a.jsxs)(i.p,{children:["The optional parameters range from prompting information to details on how to handle missing data. These parameters can be specified ",(0,a.jsx)(i.a,{href:"#positional-parameters",children:"positionally identified"}),", identified ",(0,a.jsx)(i.a,{href:"#named-parameters",children:"by name"}),", or a ",(0,a.jsx)(i.a,{href:"#hybrid-parameters",children:"hybrid of the two"}),"."]}),"\n",(0,a.jsx)(i.h3,{id:"positional-parameters",children:"Positional Parameters"}),"\n",(0,a.jsx)(i.p,{children:"Positional Parameters are identified by the order that they are listed after the field name. You can not skip a parameter, but you can end providing parameters before the end of all possible parameters. Here is an example:"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-md",children:'{{field-info BookTitle "text" "Short title for this book?" "Untitled" "required"}}\n'})}),"\n",(0,a.jsx)(i.p,{children:"The order they are accepted are as follows:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:(0,a.jsx)(i.a,{href:"/docs/reference-manual/field-info-helper/field-info-parameters/field-info-fieldname",children:"fieldName"})})," :: the name of the field you are providing data for (required)"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:(0,a.jsx)(i.a,{href:"/docs/reference-manual/field-info-helper/field-info-parameters/field-info-type",children:"type"})}),' :: Type of field ("text", "number", "date", "datetime", "boolean", "singleSelect", "multiSelect", "titleText";)']}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:(0,a.jsx)(i.a,{href:"/docs/reference-manual/field-info-helper/field-info-parameters/field-info-prompt",children:"prompt"})})," :: The prompt message to display; can use ",(0,a.jsx)(i.code,{children:"{{fields}}"})," inside it"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:(0,a.jsx)(i.a,{href:"/docs/reference-manual/field-info-helper/field-info-parameters/field-info-default",children:"default"})}),' :: The default field result to prefill in the prompt dialog box. Only accepted if "touched".']}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:(0,a.jsx)(i.a,{href:"/docs/reference-manual/field-info-helper/field-info-parameters/field-info-miss",children:"miss"})})," :: The field result that will be used if the use never attempts to answer the prompt"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:(0,a.jsx)(i.a,{href:"/docs/reference-manual/field-info-helper/field-info-parameters/field-info-directives",children:"directives"})})," :: A comma separated list of directives (see ",(0,a.jsx)(i.a,{href:"#directives",children:"below"}),") for advanced usage"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:(0,a.jsx)(i.a,{href:"/docs/reference-manual/field-info-helper/field-info-parameters/field-info-value",children:"value"})})," :: An advanced use case where you pre-fill a value into a field, skipping prompting"]}),"\n"]}),"\n",(0,a.jsx)(i.p,{children:"Note that the parameters are ordered in priority of importance and usage - thus allowing for shortened &#123;&#123;field-info&#125;&#125; entries."}),"\n",(0,a.jsx)(i.admonition,{title:"Positional Parameters == Brevity over Clarity",type:"tip",children:(0,a.jsx)(i.p,{children:"Using Positional Parameters allows you to tightly provide the basic prompting information in a compact way. You sacrifice some clarity in the meaning of each parameter for the sake of brevity."})}),"\n",(0,a.jsx)(i.h3,{id:"named-parameters",children:"Named Parameters"}),"\n",(0,a.jsxs)(i.p,{children:["By using Named Parameters for field-info, you specify each parameter by its name. The basic structure is ",(0,a.jsx)(i.code,{children:'parameterName="value"'}),".  The name of the parameters matches parameter names in the list above (",(0,a.jsx)(i.code,{children:"type"}),", ",(0,a.jsx)(i.code,{children:"prompt"}),", ",(0,a.jsx)(i.code,{children:"default"}),", ",(0,a.jsx)(i.code,{children:"miss"}),", ",(0,a.jsx)(i.code,{children:"directives"}),",",(0,a.jsx)(i.code,{children:"value"}),"). For example:"]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-md",children:'{{field-info fieldName=BookTitle type="text" prompt="Short title for this book?" default="Untitled" miss="" directives="required"}}\n'})}),"\n",(0,a.jsx)(i.p,{children:"Notes:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"Parameters cannot be duplicated"}),"\n",(0,a.jsx)(i.li,{children:"Parameters can be listed in any order"}),"\n",(0,a.jsxs)(i.li,{children:["The name to use ",(0,a.jsx)("span",{class:"z2k-mark",children:"is case sensitive"}),", please use all lowercase parameter names"]}),"\n"]}),"\n",(0,a.jsx)(i.admonition,{title:"Named Parameters == Clarity over Brevity",type:"tip",children:(0,a.jsx)(i.p,{children:"Using Named Parameters makes your templates become more readable. There is no ambiguity what each parameter's value is."})}),"\n",(0,a.jsx)(i.h3,{id:"hybrid-parameters",children:"Hybrid Parameters"}),"\n",(0,a.jsxs)(i.p,{children:["You can use a hybrid approach that blends the two. You can start with unnamed parameters and then switch to named parameters (but just not back). In practice this is the easiest approach: let the ",(0,a.jsx)(i.code,{children:"fieldName"})," and ",(0,a.jsx)(i.code,{children:"type"})," go unnamed, then name the more advanced parameter you need to set."]}),"\n",(0,a.jsx)(i.p,{children:"For example:"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-md",children:'{{field-info BookTitle "text" prompt="Short title for this book?" directives="required"}}\n'})}),"\n",(0,a.jsx)(i.admonition,{title:"Hybrid Approach == Clarity and Brevity Balanced",type:"tip",children:(0,a.jsx)(i.p,{children:"Using a Hybrid approach is the sweet spot. We recommend you include the fieldName and type in your field-info parameters, and then name any remaining parameters you wish to use. This end result is both readable and succinct."})}),"\n",(0,a.jsx)(i.h2,{id:"devilish-details",children:"Devilish Details"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:["When using named or hybrid parameters, you can only specify one named parameter per parameter type (i.e. you can't list two ",(0,a.jsx)(i.code,{children:"prompt"})," parameters)"]}),"\n"]}),"\n",(0,a.jsx)(i.admonition,{title:"OPEN QUESTIONS / ACTION ITEMS",type:"danger",children:(0,a.jsxs)(i.ol,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Directive Catalog"}),". Please confirm the authoritative list of recognized directives the engine accepts and rejects. Current docs assume at least ",(0,a.jsx)(i.code,{children:"no-prompt"}),"; additional candidates (",(0,a.jsx)(i.code,{children:"required"}),", ",(0,a.jsx)(i.code,{children:"auto"}),"/",(0,a.jsx)(i.code,{children:"autofill"}),", ",(0,a.jsx)(i.code,{children:"hidden"}),") are inferred from typical workflow needs and partial code hints."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Miss + Directives"}),". Should ",(0,a.jsx)(i.code,{children:"miss"})," semantics ever be coupled to directives (e.g., ",(0,a.jsx)(i.code,{children:"required"})," + ",(0,a.jsx)(i.code,{children:'miss="clear"'})," hard\u2011errors on finalize)? Clarify UI behavior and error surfaces."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsxs)(i.strong,{children:[(0,a.jsx)(i.code,{children:"field-output"})," Implementation"]}),". Confirm whether it should: (a) render the resolved value ",(0,a.jsx)(i.em,{children:"post\u2011prompt"}),", (b) accept the same argument grammar as ",(0,a.jsx)(i.code,{children:"field-info"}),", and (c) honor formatting helpers inline (e.g., ",(0,a.jsx)(i.code,{children:'{{format-date (field-output date) "YYYY\u2011MM\u2011DD"}}'}),")."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.strong,{children:"Validation Messages"}),". Are there standard, user\u2011facing error strings for invalid directives or types we should document verbatim? If so, surface them here for consistency across UI and docs."]}),"\n"]})})]})}function h(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,i,r)=>{r.d(i,{R:()=>s,x:()=>l});var n=r(6540);const a={},t=n.createContext(a);function s(e){const i=n.useContext(t);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(t.Provider,{value:i},e.children)}}}]);