"use strict";(globalThis.webpackChunkz2k_plugin_templates_docs=globalThis.webpackChunkz2k_plugin_templates_docs||[]).push([[6526],{8453:(e,t,i)=>{i.d(t,{R:()=>a,x:()=>r});var n=i(6540);const l={},o=n.createContext(l);function a(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),n.createElement(o.Provider,{value:t},e.children)}},9774:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>f,frontMatter:()=>a,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"reference-manual/field-info-helper/field-info-variations/field-output-helper","title":"field-output Helper","description":"describes that field-output is identical to field-info except that it outputs the value of the field","source":"@site/docs/reference-manual/field-info-helper/field-info-variations/field-output-helper.md","sourceDirName":"reference-manual/field-info-helper/field-info-variations","slug":"/reference-manual/field-info-helper/field-info-variations/field-output-helper","permalink":"/z2k-plugin-templates-docs/docs/reference-manual/field-info-helper/field-info-variations/field-output-helper","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"doc_state":"initial_ai_draft","title":"field-output Helper","sidebar_label":"field-output","aliases":["field-output Helper Function","field-output"],"slug":"field-output-helper"},"sidebar":"Reference Manual","previous":{"title":"field-info Variations","permalink":"/z2k-plugin-templates-docs/docs/reference-manual/field-info-helper/field-info-variations/field-info-variations"},"next":{"title":"fi","permalink":"/z2k-plugin-templates-docs/docs/reference-manual/field-info-helper/field-info-variations/fi-helper"}}');var l=i(4848),o=i(8453);const a={sidebar_position:10,doc_state:"initial_ai_draft",title:"field-output Helper",sidebar_label:"field-output",aliases:["field-output Helper Function","field-output"],slug:"field-output-helper"},r=void 0,s={},d=[{value:"Syntax and Semantics",id:"syntax-and-semantics",level:2},{value:"Parameters",id:"parameters",level:2}];function u(e){const t={blockquote:"blockquote",code:"code",h2:"h2",p:"p",strong:"strong",...(0,o.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.p,{children:"describes that field-output is identical to field-info except that it outputs the value of the field"}),"\n",(0,l.jsx)(t.h2,{id:"syntax-and-semantics",children:"Syntax and Semantics"}),"\n",(0,l.jsxs)(t.p,{children:["A forthcoming built\u2011in that mirrors ",(0,l.jsx)(t.code,{children:"{{field-info}}"}),"\u2019s argument structure but ",(0,l.jsx)(t.strong,{children:"emits"})," the field\u2019s resolved value at render time. This is useful when you want to both declare prompting metadata and later place the finalized value inline without repeating logic. For example, you might specify ",(0,l.jsx)(t.code,{children:'{{field-info title "text" "Give this a short name"}}'})," near the top of a template, then use ",(0,l.jsx)(t.code,{children:"{{field-output title}}"})," in the body to render the chosen title exactly as resolved."]}),"\n",(0,l.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,l.jsxs)(t.p,{children:["The parameters of ",(0,l.jsx)(t.code,{children:"{{field-output}}"})," are identical to that of ",(0,l.jsx)(t.code,{children:"{{[[prompt_info]]}}"}),":"]}),"\n",(0,l.jsx)(t.blockquote,{children:(0,l.jsx)(t.p,{children:(0,l.jsx)(t.strong,{children:"Missing embed: field-info"})})})]})}function f(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(u,{...e})}):u(e)}}}]);