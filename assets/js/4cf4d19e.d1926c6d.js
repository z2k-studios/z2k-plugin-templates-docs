"use strict";(self.webpackChunkz2k_plugin_templates_docs=self.webpackChunkz2k_plugin_templates_docs||[]).push([[525],{4055:(e,t,d)=>{d.r(t),d.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"reference-manual/built-in-template-fields/built-in-fields-card-data","title":"Built-In Fields - Card Data","description":"Z2K supports a number of predefined built-in template fields regarding the current card (file).","source":"@site/docs/reference-manual/built-in-template-fields/built-in-fields-card-data.md","sourceDirName":"reference-manual/built-in-template-fields","slug":"/reference-manual/built-in-template-fields/built-in-fields-card-data","permalink":"/z2k-plugin-templates-docs/docs/reference-manual/built-in-template-fields/built-in-fields-card-data","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":44,"frontMatter":{"sidebar_position":44,"title":"Built-In Fields - Card Data","slug":"built-in-fields-card-data"},"sidebar":"Reference Manual","previous":{"title":"Built In Fields - Date and Time","permalink":"/z2k-plugin-templates-docs/docs/reference-manual/built-in-template-fields/built-in-fields-date-and-time"},"next":{"title":"Built-In Fields - Card Reference","permalink":"/z2k-plugin-templates-docs/docs/reference-manual/built-in-template-fields/built-in-fields-card-reference"}}');var r=d(4848),n=d(8453);const s={sidebar_position:44,title:"Built-In Fields - Card Data",slug:"built-in-fields-card-data"},l="Card (File) Data",a={},c=[];function o(e){const t={code:"code",h1:"h1",header:"header",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"card-file-data",children:"Card (File) Data"})}),"\n",(0,r.jsx)(t.p,{children:"Z2K supports a number of predefined built-in template fields regarding the current card (file)."}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Field"}),(0,r.jsx)(t.th,{children:"Value to be inserted"}),(0,r.jsx)(t.th,{children:"Example"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"{{title}}"})}),(0,r.jsx)(t.td,{children:"The title of this card (*1)"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"Leaves of Grass - Walt Whitman"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"{{cardTitle}}"})}),(0,r.jsxs)(t.td,{children:["The title of this card (same as ",(0,r.jsx)(t.code,{children:"{{title}}"}),")"]}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"Leaves of Grass - Walt Whitman"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"{{cardAtom}}"})}),(0,r.jsx)(t.td,{children:"The atom type of this card"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"Thoughts"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"{{cardTemplateName}}"})}),(0,r.jsx)(t.td,{children:"The name of the template used for this card"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"Information - Book"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"{{cardCreator}}"})}),(0,r.jsx)(t.td,{children:"The name of the card creator"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"Your Name"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"{{cardType}}"})}),(0,r.jsx)(t.td,{children:"The Z2K Card Type"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"Ontology"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"{{cardSourceType}}"})}),(0,r.jsx)(t.td,{children:"The Z2K Card Source Type"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"InternalThought"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"{{templateName}}"})}),(0,r.jsx)(t.td,{children:"The name of the Template used to create this card"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"Book Template"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"{{sourceText}}"})}),(0,r.jsx)(t.td,{children:'This field is used to show where in the template file to insert raw text data that was provided to the Template Plugin. If missing, it appends the provided text to the bottom of the file. This is used a) when using the "Create Card from Text" command on selected text, and b) when passing additional data via JSON or URI'}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"A paragraph of text that will be inserted into the template."})})]})]})]}),"\n",(0,r.jsxs)(t.p,{children:["(*1) The ",(0,r.jsx)(t.code,{children:"{{title}}"})," built-in fields perform identically to Obsidian's predefined template variables with the same name."]})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,t,d)=>{d.d(t,{R:()=>s,x:()=>l});var i=d(6540);const r={},n=i.createContext(r);function s(e){const t=i.useContext(n);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(n.Provider,{value:t},e.children)}}}]);